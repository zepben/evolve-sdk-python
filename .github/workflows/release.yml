name: Release and deploy to Pypi

on:
  workflow_dispatch:

jobs:
  release-checks:
    runs-on: ubuntu-latest
    container: zepben/pipeline-basic
    env:
      SLACK_NOTIFICATION: YES
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    outputs:
      version: ${{ steps.check.outputs.version }}
    steps:
      - uses: actions/checkout@v3

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - name: Release checks and update version for release
        id: check
        run: |
          /scripts/release-checks.sh --python setup.py
          /scripts/finalize-version.sh --python setup.py
          version=$(grep version setup.py | cut -d= -f2 | tr -d '",')
          echo "::set-output name=version::$(echo $version)"
        shell: bash

      - name: Cache licence-check
        uses: actions/cache@v3
        with:
          path: /lc
          key: lcc

      - name: Check licence
        uses: zepben/licence-check-action@main
        with:
          LC_URL: ${{ secrets.LC_URL }}
          PATH: src

  build-docs:
    needs: release-checks
    runs-on: ubuntu-latest
    outputs:
      artifact: docs
    container: node:12-alpine
    steps:
      - name: Install Git
        run: |
          apk add git

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - uses: actions/checkout@v3

      - name: Checkout release branch
        run: |
          git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
          git fetch --all
          git checkout release
        shell: sh

      - name: Cache nodejs deps
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: npm

      - name: Build docusaurus
        id: build
        uses: zepben/docusaurus-action@main
        with:
          VERSION: ${{ needs.release-checks.outputs.version }}
          NPM_REPO: ${{ secrets.NPM_REPO }}
          NPM_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
        continue-on-error: true

#      - uses: actions/upload-artifact@master
#        if: steps.build.outcome == 'success'
#        with:
#          name: docs
#          path: docs/build/

      - name: Fail build
        if: steps.build.outcome == 'failure'
        run: | 
          git push origin -d release
          echo "There was an error in the docusaurus build above."
          exit 1
        shell: sh

  deploy:
    runs-on: ubuntu-latest
    container: python:3.7
    needs: [release-checks, build-docs]
    outputs:
      artifact: ${{ steps.build.outputs.artifact }}
    steps:
      - name: Install dependencies
        run: |
          pip install tox twine

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - uses: actions/checkout@v3

      - name: Build and publish
        id: build
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          tox
          #twine upload dist/*
          artifact="zepben.evolve-${{ needs.release-checks.outputs.version }}-py3-none-any.whl"
          echo "::set-output name=artifact::$(echo $artifact)"
          echo "::set-output name=artifact-path::$(echo dist/$artifact)"
        shell: bash
        continue-on-error: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          fail_ci_if_error: false

#      - uses: actions/upload-artifact@master
#        if: steps.build.outcome == 'success'
#        with:
#          name: ${{ steps.build.outputs.artifact }}
#          path: ${{ steps.build.outputs.artifact-path }}

      - name: Delete release branch if deploy failed and fail
        if: steps.build.outcome == 'failure'
        run: |
          git push origin -d release
          echo "There was an error in the python build and publish commands above."
          exit 1
        shell: bash

  create-release:
    needs: [deploy, build-docs, release-checks]
    runs-on: ubuntu-latest
    container: zepben/pipeline-basic:5.6.0
    steps:
      - uses: actions/checkout@v3

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - name: Merge and Tag
        id: merge
        run: |
          git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
          git fetch --all
          git merge origin/release
          git push origin ${GITHUB_REF/refs\/heads\//}
          git tag "v${{ needs.release-checks.outputs.version }}"
          git push --tags
          echo "::set-output name=tag::$(echo v${{ needs.release-checks.outputs.version }})"
        shell: bash

      - name: Fail
        if: steps.merge.outcome == 'failure'
        run: | 
          git push origin -d release
          echo "There was an error in merging the branch. release branch was deleted."
          exit 1
        shell: bash

#      - name: Download binary
#        uses: actions/download-artifact@v2
#        with:
#          name: ${{ needs.deploy.outputs.artifact }}
#          path: built-artifacts
#
#      - name: Download docs
#        uses: actions/download-artifact@v2
#        with:
#          name: docs
#          path: docs-site
#
#      - name: Zip documentation
#        run: |
#          cd docs-site
#          zip -r docs-site.zip .
#        shell: bash


      - name: Create Release and upload assets
        if: success()
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.merge.outputs.tag }}
          body_path: changelog.md
          draft: false
          prerelease: false
#          files: |
#            built-artifacts/${{ needs.deploy.outputs.artifact }}
#            docs-site/docs-site.zip
        continue-on-error: true

#      - name: Deploy documentation
#        uses: peter-evans/repository-dispatch@v1
#        with:
#          token: ${{ secrets.CI_GITHUB_TOKEN }}
#          repository: ${{ secrets.DOCS_REPO }}
#          event-type: ${{ secrets.DOCS_REPO_EVOLVE_WORKFLOW }}
#          client-payload: '{"product_key": "python-sdk", "download_url": "https://github.com/${{ github.repository }}/releases/download/${{ steps.merge.outputs.tag }}/docs-site.zip"}'

  update-version:
    needs: create-release
    runs-on: ubuntu-latest
    container: zepben/pipeline-basic:5.6.0
    env:
      ZEPBEN_PYPI_USERNAME: ${{ secrets.NEXUS_USERNAME }}
      ZEPBEN_PYPI_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
      ZEPBEN_PYPI_REPO: ${{ secrets.ZEPBEN_PYPI_REPO }}
      SLACK_NOTIFICATION: YES
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    steps:
      - uses: actions/checkout@v3

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - name: Update to next minor version
        run: |
          /scripts/update-version.sh --python --release setup.py changelog.md
        shell: bash
